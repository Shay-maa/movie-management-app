/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMovie } from '../fn/movie-controller/add-movie';
import { AddMovie$Params } from '../fn/movie-controller/add-movie';
import { batchAddMoviesFromOmdb } from '../fn/movie-controller/batch-add-movies-from-omdb';
import { BatchAddMoviesFromOmdb$Params } from '../fn/movie-controller/batch-add-movies-from-omdb';
import { deleteMovie } from '../fn/movie-controller/delete-movie';
import { DeleteMovie$Params } from '../fn/movie-controller/delete-movie';
import { getAllMovies } from '../fn/movie-controller/get-all-movies';
import { GetAllMovies$Params } from '../fn/movie-controller/get-all-movies';
import { getMovieById } from '../fn/movie-controller/get-movie-by-id';
import { GetMovieById$Params } from '../fn/movie-controller/get-movie-by-id';
import { getMovies } from '../fn/movie-controller/get-movies';
import { GetMovies$Params } from '../fn/movie-controller/get-movies';
import { Movie } from '../models/movie';
import { PageMovie } from '../models/page-movie';
import { rateMovie } from '../fn/movie-controller/rate-movie';
import { RateMovie$Params } from '../fn/movie-controller/rate-movie';
import { searchMovie } from '../fn/movie-controller/search-movie';
import { SearchMovie$Params } from '../fn/movie-controller/search-movie';
import { searchMovies } from '../fn/movie-controller/search-movies';
import { SearchMovies$Params } from '../fn/movie-controller/search-movies';
import { searchMoviesUsingPagination } from '../fn/movie-controller/search-movies-using-pagination';
import { SearchMoviesUsingPagination$Params } from '../fn/movie-controller/search-movies-using-pagination';

@Injectable({ providedIn: 'root' })
export class MovieControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rateMovie()` */
  static readonly RateMoviePath = '/api/v1/movies/{id}/rate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rateMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  rateMovie$Response(params: RateMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<Movie>> {
    return rateMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rateMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rateMovie(params: RateMovie$Params, context?: HttpContext): Observable<Movie> {
    return this.rateMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<Movie>): Movie => r.body)
    );
  }

  /** Path part for operation `searchMovie()` */
  static readonly SearchMoviePath = '/api/v1/movies/admin/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovie$Response(params: SearchMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Movie>>> {
    return searchMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovie(params: SearchMovie$Params, context?: HttpContext): Observable<Array<Movie>> {
    return this.searchMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Movie>>): Array<Movie> => r.body)
    );
  }

  /** Path part for operation `batchAddMoviesFromOmdb()` */
  static readonly BatchAddMoviesFromOmdbPath = '/api/v1/movies/admin/batch-add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `batchAddMoviesFromOmdb()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  batchAddMoviesFromOmdb$Response(params: BatchAddMoviesFromOmdb$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Movie>>> {
    return batchAddMoviesFromOmdb(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `batchAddMoviesFromOmdb$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  batchAddMoviesFromOmdb(params: BatchAddMoviesFromOmdb$Params, context?: HttpContext): Observable<Array<Movie>> {
    return this.batchAddMoviesFromOmdb$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Movie>>): Array<Movie> => r.body)
    );
  }

  /** Path part for operation `addMovie()` */
  static readonly AddMoviePath = '/api/v1/movies/admin/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  addMovie$Response(params: AddMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<Movie>> {
    return addMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addMovie(params: AddMovie$Params, context?: HttpContext): Observable<Movie> {
    return this.addMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<Movie>): Movie => r.body)
    );
  }

  /** Path part for operation `getAllMovies()` */
  static readonly GetAllMoviesPath = '/api/v1/movies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMovies$Response(params?: GetAllMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Movie>>> {
    return getAllMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMovies(params?: GetAllMovies$Params, context?: HttpContext): Observable<Array<Movie>> {
    return this.getAllMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Movie>>): Array<Movie> => r.body)
    );
  }

  /** Path part for operation `getMovieById()` */
  static readonly GetMovieByIdPath = '/api/v1/movies/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMovieById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovieById$Response(params: GetMovieById$Params, context?: HttpContext): Observable<StrictHttpResponse<Movie>> {
    return getMovieById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMovieById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovieById(params: GetMovieById$Params, context?: HttpContext): Observable<Movie> {
    return this.getMovieById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Movie>): Movie => r.body)
    );
  }

  /** Path part for operation `searchMovies()` */
  static readonly SearchMoviesPath = '/api/v1/movies/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovies$Response(params: SearchMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Movie>>> {
    return searchMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovies(params: SearchMovies$Params, context?: HttpContext): Observable<Array<Movie>> {
    return this.searchMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Movie>>): Array<Movie> => r.body)
    );
  }

  /** Path part for operation `searchMoviesUsingPagination()` */
  static readonly SearchMoviesUsingPaginationPath = '/api/v1/movies/movies/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchMoviesUsingPagination()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMoviesUsingPagination$Response(params: SearchMoviesUsingPagination$Params, context?: HttpContext): Observable<StrictHttpResponse<PageMovie>> {
    return searchMoviesUsingPagination(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchMoviesUsingPagination$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMoviesUsingPagination(params: SearchMoviesUsingPagination$Params, context?: HttpContext): Observable<PageMovie> {
    return this.searchMoviesUsingPagination$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageMovie>): PageMovie => r.body)
    );
  }

  /** Path part for operation `getMovies()` */
  static readonly GetMoviesPath = '/api/v1/movies/get-movies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovies$Response(params?: GetMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<PageMovie>> {
    return getMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMovies(params?: GetMovies$Params, context?: HttpContext): Observable<PageMovie> {
    return this.getMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageMovie>): PageMovie => r.body)
    );
  }

  /** Path part for operation `deleteMovie()` */
  static readonly DeleteMoviePath = '/api/v1/movies/admin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMovie()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteMovie$Response(params: DeleteMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<Movie>> {
    return deleteMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMovie$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteMovie(params: DeleteMovie$Params, context?: HttpContext): Observable<Movie> {
    return this.deleteMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<Movie>): Movie => r.body)
    );
  }

}
